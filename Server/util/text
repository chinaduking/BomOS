"C:\Program Files\JetBrains\WebStorm 2017.2.3\bin\runnerw.exe" "C:\Program Files\nodejs\node.exe" E:\work\BomOS\Server\bin\www
waterline initialize success!!
IncomingMessage {
  _readableState:
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        bytesRead: 14362,
        _externalStream: [External],
        fd: -1,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events:
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Array],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 1120 },
     _server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 1120 },
     _idleTimeout: 120000,
     _idleNext:
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev:
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 11250,
     _destroyed: false,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage:
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        _startAt: undefined,
        _startTime: undefined,
        writeHead: [Function: writeHead],
        __onFinished: [Object],
        [Symbol(outHeadersKey)]: [Object] },
     _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 51151 },
     [Symbol(asyncId)]: 1123,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 1125,
     [Symbol(triggerId)]: 1120 },
  connection:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        bytesRead: 14362,
        _externalStream: [External],
        fd: -1,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events:
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Array],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 1120 },
     _server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 1120 },
     _idleTimeout: 120000,
     _idleNext:
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev:
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 11250,
     _destroyed: false,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage:
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        _startAt: undefined,
        _startTime: undefined,
        writeHead: [Function: writeHead],
        __onFinished: [Object],
        [Symbol(outHeadersKey)]: [Object] },
     _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 51151 },
     [Symbol(asyncId)]: 1123,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 1125,
     [Symbol(triggerId)]: 1120 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers:
   { cookie: 'Admin-Token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoiYWRtaW4iLCJleHAiOjE1MTMzMDY5NjR9.cAQNI6NHh8OUZgpQPCrXUE1t78fE5WHrExHGu2ZJ7XY',
     'accept-language': 'zh-CN,zh;q=0.8',
     'accept-encoding': 'gzip, deflate, br',
     referer: 'http://localhost:9528/',
     accept: '*/*',
     'content-type': 'multipart/form-data; boundary=----WebKitFormBoundarydlAic9nHYbIbnZ1w',
     'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36',
     origin: 'http://localhost:9528',
     'content-length': '13754',
     connection: 'close',
     host: 'localhost:3000' },
  rawHeaders:
   [ 'cookie',
     'Admin-Token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoiYWRtaW4iLCJleHAiOjE1MTMzMDY5NjR9.cAQNI6NHh8OUZgpQPCrXUE1t78fE5WHrExHGu2ZJ7XY',
     'accept-language',
     'zh-CN,zh;q=0.8',
     'accept-encoding',
     'gzip, deflate, br',
     'referer',
     'http://localhost:9528/',
     'accept',
     '*/*',
     'content-type',
     'multipart/form-data; boundary=----WebKitFormBoundarydlAic9nHYbIbnZ1w',
     'user-agent',
     'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36',
     'origin',
     'http://localhost:9528',
     'content-length',
     '13754',
     'connection',
     'close',
     'host',
     'localhost:3000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/upfilesubbomnum',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        bytesRead: 14362,
        _externalStream: [External],
        fd: -1,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events:
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Array],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 1120 },
     _server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 1120 },
     _idleTimeout: 120000,
     _idleNext:
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev:
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 11250,
     _destroyed: false,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage:
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        _startAt: undefined,
        _startTime: undefined,
        writeHead: [Function: writeHead],
        __onFinished: [Object],
        [Symbol(outHeadersKey)]: [Object] },
     _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 51151 },
     [Symbol(asyncId)]: 1123,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 1125,
     [Symbol(triggerId)]: 1120 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '/api',
  originalUrl: '/api/upfilesubbomnum',
  _parsedUrl:
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/upfilesubbomnum',
     path: '/upfilesubbomnum',
     href: '/upfilesubbomnum',
     _raw: '/upfilesubbomnum' },
  params: {},
  query: {},
  res:
   ServerResponse {
     domain: null,
     _events: { finish: [Array], end: [Function: onevent] },
     _eventsCount: 2,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 11250,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        _peername: [Object],
        [Symbol(asyncId)]: 1123,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 1125,
        [Symbol(triggerId)]: 1120 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 11250,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        _peername: [Object],
        [Symbol(asyncId)]: 1123,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 1125,
        [Symbol(triggerId)]: 1120 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     _startAt: undefined,
     _startTime: undefined,
     writeHead: [Function: writeHead],
     __onFinished: { [Function: listener] queue: [Array] },
     [Symbol(outHeadersKey)]: { 'x-powered-by': [Array] } },
  _startAt: [ 2416250, 668802765 ],
  _startTime: 2017-12-14T09:31:39.706Z,
  _remoteAddress: '::ffff:127.0.0.1',
  body: {},
  secret: undefined,
  cookies: { 'Admin-Token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoiYWRtaW4iLCJleHAiOjE1MTMzMDY5NjR9.cAQNI6NHh8OUZgpQPCrXUE1t78fE5WHrExHGu2ZJ7XY' },
  signedCookies: {},
  models:
   { t_user:
      child {
        connections: [Object],
        waterline: [Object],
        adapter: [Object],
        _attributes: [Object],
        defaults: [Object],
        _cast: [Object],
        _schema: [Object],
        _validator: [Object],
        _callbacks: [Object],
        _instanceMethods: {},
        hasSchema: true,
        migrate: 'alter',
        _model: [Object],
        primaryKey: 'ID',
        _transformer: [Object],
        adapterDictionary: [Object],
        emit: [Function],
        pkFormat: 'integer',
        syncable: true,
        escape: [Function],
        escapeId: [Function],
        registerConnection: [Function],
        teardown: [Function],
        query: [Function],
        define: [Function],
        addAttribute: [Function],
        removeAttribute: [Function],
        findOneByID: [Function: dynamicMethod],
        findOneByIDIn: [Function: dynamicMethod],
        findOneByIDLike: [Function: dynamicMethod],
        findByID: [Function: dynamicMethod],
        findByIDIn: [Function: dynamicMethod],
        findByIDLike: [Function: dynamicMethod],
        countByID: [Function: dynamicMethod],
        countByIDIn: [Function: dynamicMethod],
        countByIDLike: [Function: dynamicMethod],
        IDStartsWith: [Function: dynamicMethod],
        IDContains: [Function: dynamicMethod],
        IDEndsWith: [Function: dynamicMethod],
        findOneByUsername: [Function: dynamicMethod],
        findOneByUsernameIn: [Function: dynamicMethod],
        findOneByUsernameLike: [Function: dynamicMethod],
        findByUsername: [Function: dynamicMethod],
        findByUsernameIn: [Function: dynamicMethod],
        findByUsernameLike: [Function: dynamicMethod],
        countByUsername: [Function: dynamicMethod],
        countByUsernameIn: [Function: dynamicMethod],
        countByUsernameLike: [Function: dynamicMethod],
        usernameStartsWith: [Function: dynamicMethod],
        usernameContains: [Function: dynamicMethod],
        usernameEndsWith: [Function: dynamicMethod],
        findOneByPassword: [Function: dynamicMethod],
        findOneByPasswordIn: [Function: dynamicMethod],
        findOneByPasswordLike: [Function: dynamicMethod],
        findByPassword: [Function: dynamicMethod],
        findByPasswordIn: [Function: dynamicMethod],
        findByPasswordLike: [Function: dynamicMethod],
        countByPassword: [Function: dynamicMethod],
        countByPasswordIn: [Function: dynamicMethod],
        countByPasswordLike: [Function: dynamicMethod],
        passwordStartsWith: [Function: dynamicMethod],
        passwordContains: [Function: dynamicMethod],
        passwordEndsWith: [Function: dynamicMethod],
        findOneByAdmin: [Function: dynamicMethod],
        findOneByAdminIn: [Function: dynamicMethod],
        findOneByAdminLike: [Function: dynamicMethod],
        findByAdmin: [Function: dynamicMethod],
        findByAdminIn: [Function: dynamicMethod],
        findByAdminLike: [Function: dynamicMethod],
        countByAdmin: [Function: dynamicMethod],
        countByAdminIn: [Function: dynamicMethod],
        countByAdminLike: [Function: dynamicMethod],
        adminStartsWith: [Function: dynamicMethod],
        adminContains: [Function: dynamicMethod],
        adminEndsWith: [Function: dynamicMethod],
        findOneByAvatar: [Function: dynamicMethod],
        findOneByAvatarIn: [Function: dynamicMethod],
        findOneByAvatarLike: [Function: dynamicMethod],
        findByAvatar: [Function: dynamicMethod],
        findByAvatarIn: [Function: dynamicMethod],
        findByAvatarLike: [Function: dynamicMethod],
        countByAvatar: [Function: dynamicMethod],
        countByAvatarIn: [Function: dynamicMethod],
        countByAvatarLike: [Function: dynamicMethod],
        avatarStartsWith: [Function: dynamicMethod],
        avatarContains: [Function: dynamicMethod],
        avatarEndsWith: [Function: dynamicMethod],
        findOneByCreatedAt: [Function: dynamicMethod],
        findOneByCreatedAtIn: [Function: dynamicMethod],
        findOneByCreatedAtLike: [Function: dynamicMethod],
        findByCreatedAt: [Function: dynamicMethod],
        findByCreatedAtIn: [Function: dynamicMethod],
        findByCreatedAtLike: [Function: dynamicMethod],
        countByCreatedAt: [Function: dynamicMethod],
        countByCreatedAtIn: [Function: dynamicMethod],
        countByCreatedAtLike: [Function: dynamicMethod],
        createdAtStartsWith: [Function: dynamicMethod],
        createdAtContains: [Function: dynamicMethod],
        createdAtEndsWith: [Function: dynamicMethod],
        findOneByUpdatedAt: [Function: dynamicMethod],
        findOneByUpdatedAtIn: [Function: dynamicMethod],
        findOneByUpdatedAtLike: [Function: dynamicMethod],
        findByUpdatedAt: [Function: dynamicMethod],
        findByUpdatedAtIn: [Function: dynamicMethod],
        findByUpdatedAtLike: [Function: dynamicMethod],
        countByUpdatedAt: [Function: dynamicMethod],
        countByUpdatedAtIn: [Function: dynamicMethod],
        countByUpdatedAtLike: [Function: dynamicMethod],
        updatedAtStartsWith: [Function: dynamicMethod],
        updatedAtContains: [Function: dynamicMethod],
        updatedAtEndsWith: [Function: dynamicMethod],
        definition: [Object],
        meta: [Object],
        schema: [Object] },
     t_bom:
      child {
        connections: [Object],
        waterline: [Object],
        adapter: [Object],
        _attributes: [Object],
        defaults: [Object],
        _cast: [Object],
        _schema: [Object],
        _validator: [Object],
        _callbacks: [Object],
        _instanceMethods: {},
        hasSchema: true,
        migrate: 'alter',
        _model: [Object],
        primaryKey: 'ID',
        _transformer: [Object],
        adapterDictionary: [Object],
        emit: [Function],
        pkFormat: 'integer',
        syncable: true,
        escape: [Function],
        escapeId: [Function],
        registerConnection: [Function],
        teardown: [Function],
        query: [Function],
        define: [Function],
        addAttribute: [Function],
        removeAttribute: [Function],
        findOneByID: [Function: dynamicMethod],
        findOneByIDIn: [Function: dynamicMethod],
        findOneByIDLike: [Function: dynamicMethod],
        findByID: [Function: dynamicMethod],
        findByIDIn: [Function: dynamicMethod],
        findByIDLike: [Function: dynamicMethod],
        countByID: [Function: dynamicMethod],
        countByIDIn: [Function: dynamicMethod],
        countByIDLike: [Function: dynamicMethod],
        IDStartsWith: [Function: dynamicMethod],
        IDContains: [Function: dynamicMethod],
        IDEndsWith: [Function: dynamicMethod],
        findOneByMfr_Value: [Function: dynamicMethod],
        findOneByMfr_ValueIn: [Function: dynamicMethod],
        findOneByMfr_ValueLike: [Function: dynamicMethod],
        findByMfr_Value: [Function: dynamicMethod],
        findByMfr_ValueIn: [Function: dynamicMethod],
        findByMfr_ValueLike: [Function: dynamicMethod],
        countByMfr_Value: [Function: dynamicMethod],
        countByMfr_ValueIn: [Function: dynamicMethod],
        countByMfr_ValueLike: [Function: dynamicMethod],
        Mfr_ValueStartsWith: [Function: dynamicMethod],
        Mfr_ValueContains: [Function: dynamicMethod],
        Mfr_ValueEndsWith: [Function: dynamicMethod],
        findOneByMfr: [Function: dynamicMethod],
        findOneByMfrIn: [Function: dynamicMethod],
        findOneByMfrLike: [Function: dynamicMethod],
        findByMfr: [Function: dynamicMethod],
        findByMfrIn: [Function: dynamicMethod],
        findByMfrLike: [Function: dynamicMethod],
        countByMfr: [Function: dynamicMethod],
        countByMfrIn: [Function: dynamicMethod],
        countByMfrLike: [Function: dynamicMethod],
        MfrStartsWith: [Function: dynamicMethod],
        MfrContains: [Function: dynamicMethod],
        MfrEndsWith: [Function: dynamicMethod],
        findOneByNum: [Function: dynamicMethod],
        findOneByNumIn: [Function: dynamicMethod],
        findOneByNumLike: [Function: dynamicMethod],
        findByNum: [Function: dynamicMethod],
        findByNumIn: [Function: dynamicMethod],
        findByNumLike: [Function: dynamicMethod],
        countByNum: [Function: dynamicMethod],
        countByNumIn: [Function: dynamicMethod],
        countByNumLike: [Function: dynamicMethod],
        NumStartsWith: [Function: dynamicMethod],
        NumContains: [Function: dynamicMethod],
        NumEndsWith: [Function: dynamicMethod],
        findOneByWaring_Value: [Function: dynamicMethod],
        findOneByWaring_ValueIn: [Function: dynamicMethod],
        findOneByWaring_ValueLike: [Function: dynamicMethod],
        findByWaring_Value: [Function: dynamicMethod],
        findByWaring_ValueIn: [Function: dynamicMethod],
        findByWaring_ValueLike: [Function: dynamicMethod],
        countByWaring_Value: [Function: dynamicMethod],
        countByWaring_ValueIn: [Function: dynamicMethod],
        countByWaring_ValueLike: [Function: dynamicMethod],
        Waring_ValueStartsWith: [Function: dynamicMethod],
        Waring_ValueContains: [Function: dynamicMethod],
        Waring_ValueEndsWith: [Function: dynamicMethod],
        findOneByEncodeNum: [Function: dynamicMethod],
        findOneByEncodeNumIn: [Function: dynamicMethod],
        findOneByEncodeNumLike: [Function: dynamicMethod],
        findByEncodeNum: [Function: dynamicMethod],
        findByEncodeNumIn: [Function: dynamicMethod],
        findByEncodeNumLike: [Function: dynamicMethod],
        countByEncodeNum: [Function: dynamicMethod],
        countByEncodeNumIn: [Function: dynamicMethod],
        countByEncodeNumLike: [Function: dynamicMethod],
        EncodeNumStartsWith: [Function: dynamicMethod],
        EncodeNumContains: [Function: dynamicMethod],
        EncodeNumEndsWith: [Function: dynamicMethod],
        findOneByPrice: [Function: dynamicMethod],
        findOneByPriceIn: [Function: dynamicMethod],
        findOneByPriceLike: [Function: dynamicMethod],
        findByPrice: [Function: dynamicMethod],
        findByPriceIn: [Function: dynamicMethod],
        findByPriceLike: [Function: dynamicMethod],
        countByPrice: [Function: dynamicMethod],
        countByPriceIn: [Function: dynamicMethod],
        countByPriceLike: [Function: dynamicMethod],
        PriceStartsWith: [Function: dynamicMethod],
        PriceContains: [Function: dynamicMethod],
        PriceEndsWith: [Function: dynamicMethod],
        findOneByRemark: [Function: dynamicMethod],
        findOneByRemarkIn: [Function: dynamicMethod],
        findOneByRemarkLike: [Function: dynamicMethod],
        findByRemark: [Function: dynamicMethod],
        findByRemarkIn: [Function: dynamicMethod],
        findByRemarkLike: [Function: dynamicMethod],
        countByRemark: [Function: dynamicMethod],
        countByRemarkIn: [Function: dynamicMethod],
        countByRemarkLike: [Function: dynamicMethod],
        RemarkStartsWith: [Function: dynamicMethod],
        RemarkContains: [Function: dynamicMethod],
        RemarkEndsWith: [Function: dynamicMethod],
        findOneByCreatedAt: [Function: dynamicMethod],
        findOneByCreatedAtIn: [Function: dynamicMethod],
        findOneByCreatedAtLike: [Function: dynamicMethod],
        findByCreatedAt: [Function: dynamicMethod],
        findByCreatedAtIn: [Function: dynamicMethod],
        findByCreatedAtLike: [Function: dynamicMethod],
        countByCreatedAt: [Function: dynamicMethod],
        countByCreatedAtIn: [Function: dynamicMethod],
        countByCreatedAtLike: [Function: dynamicMethod],
        createdAtStartsWith: [Function: dynamicMethod],
        createdAtContains: [Function: dynamicMethod],
        createdAtEndsWith: [Function: dynamicMethod],
        findOneByUpdatedAt: [Function: dynamicMethod],
        findOneByUpdatedAtIn: [Function: dynamicMethod],
        findOneByUpdatedAtLike: [Function: dynamicMethod],
        findByUpdatedAt: [Function: dynamicMethod],
        findByUpdatedAtIn: [Function: dynamicMethod],
        findByUpdatedAtLike: [Function: dynamicMethod],
        countByUpdatedAt: [Function: dynamicMethod],
        countByUpdatedAtIn: [Function: dynamicMethod],
        countByUpdatedAtLike: [Function: dynamicMethod],
        updatedAtStartsWith: [Function: dynamicMethod],
        updatedAtContains: [Function: dynamicMethod],
        updatedAtEndsWith: [Function: dynamicMethod],
        definition: [Object],
        meta: [Object],
        schema: [Object] },
     t_addbom:
      child {
        connections: [Object],
        waterline: [Object],
        adapter: [Object],
        _attributes: [Object],
        defaults: [Object],
        _cast: [Object],
        _schema: [Object],
        _validator: [Object],
        _callbacks: [Object],
        _instanceMethods: {},
        hasSchema: true,
        migrate: 'alter',
        _model: [Object],
        primaryKey: 'ID',
        _transformer: [Object],
        adapterDictionary: [Object],
        emit: [Function],
        pkFormat: 'integer',
        syncable: true,
        escape: [Function],
        escapeId: [Function],
        registerConnection: [Function],
        teardown: [Function],
        query: [Function],
        define: [Function],
        addAttribute: [Function],
        removeAttribute: [Function],
        findOneByID: [Function: dynamicMethod],
        findOneByIDIn: [Function: dynamicMethod],
        findOneByIDLike: [Function: dynamicMethod],
        findByID: [Function: dynamicMethod],
        findByIDIn: [Function: dynamicMethod],
        findByIDLike: [Function: dynamicMethod],
        countByID: [Function: dynamicMethod],
        countByIDIn: [Function: dynamicMethod],
        countByIDLike: [Function: dynamicMethod],
        IDStartsWith: [Function: dynamicMethod],
        IDContains: [Function: dynamicMethod],
        IDEndsWith: [Function: dynamicMethod],
        findOneByMfr_Value: [Function: dynamicMethod],
        findOneByMfr_ValueIn: [Function: dynamicMethod],
        findOneByMfr_ValueLike: [Function: dynamicMethod],
        findByMfr_Value: [Function: dynamicMethod],
        findByMfr_ValueIn: [Function: dynamicMethod],
        findByMfr_ValueLike: [Function: dynamicMethod],
        countByMfr_Value: [Function: dynamicMethod],
        countByMfr_ValueIn: [Function: dynamicMethod],
        countByMfr_ValueLike: [Function: dynamicMethod],
        Mfr_ValueStartsWith: [Function: dynamicMethod],
        Mfr_ValueContains: [Function: dynamicMethod],
        Mfr_ValueEndsWith: [Function: dynamicMethod],
        findOneByMfr: [Function: dynamicMethod],
        findOneByMfrIn: [Function: dynamicMethod],
        findOneByMfrLike: [Function: dynamicMethod],
        findByMfr: [Function: dynamicMethod],
        findByMfrIn: [Function: dynamicMethod],
        findByMfrLike: [Function: dynamicMethod],
        countByMfr: [Function: dynamicMethod],
        countByMfrIn: [Function: dynamicMethod],
        countByMfrLike: [Function: dynamicMethod],
        MfrStartsWith: [Function: dynamicMethod],
        MfrContains: [Function: dynamicMethod],
        MfrEndsWith: [Function: dynamicMethod],
        findOneByNum: [Function: dynamicMethod],
        findOneByNumIn: [Function: dynamicMethod],
        findOneByNumLike: [Function: dynamicMethod],
        findByNum: [Function: dynamicMethod],
        findByNumIn: [Function: dynamicMethod],
        findByNumLike: [Function: dynamicMethod],
        countByNum: [Function: dynamicMethod],
        countByNumIn: [Function: dynamicMethod],
        countByNumLike: [Function: dynamicMethod],
        NumStartsWith: [Function: dynamicMethod],
        NumContains: [Function: dynamicMethod],
        NumEndsWith: [Function: dynamicMethod],
        findOneByWaring_Value: [Function: dynamicMethod],
        findOneByWaring_ValueIn: [Function: dynamicMethod],
        findOneByWaring_ValueLike: [Function: dynamicMethod],
        findByWaring_Value: [Function: dynamicMethod],
        findByWaring_ValueIn: [Function: dynamicMethod],
        findByWaring_ValueLike: [Function: dynamicMethod],
        countByWaring_Value: [Function: dynamicMethod],
        countByWaring_ValueIn: [Function: dynamicMethod],
        countByWaring_ValueLike: [Function: dynamicMethod],
        Waring_ValueStartsWith: [Function: dynamicMethod],
        Waring_ValueContains: [Function: dynamicMethod],
        Waring_ValueEndsWith: [Function: dynamicMethod],
        findOneByEncodeNum: [Function: dynamicMethod],
        findOneByEncodeNumIn: [Function: dynamicMethod],
        findOneByEncodeNumLike: [Function: dynamicMethod],
        findByEncodeNum: [Function: dynamicMethod],
        findByEncodeNumIn: [Function: dynamicMethod],
        findByEncodeNumLike: [Function: dynamicMethod],
        countByEncodeNum: [Function: dynamicMethod],
        countByEncodeNumIn: [Function: dynamicMethod],
        countByEncodeNumLike: [Function: dynamicMethod],
        EncodeNumStartsWith: [Function: dynamicMethod],
        EncodeNumContains: [Function: dynamicMethod],
        EncodeNumEndsWith: [Function: dynamicMethod],
        findOneByPrice: [Function: dynamicMethod],
        findOneByPriceIn: [Function: dynamicMethod],
        findOneByPriceLike: [Function: dynamicMethod],
        findByPrice: [Function: dynamicMethod],
        findByPriceIn: [Function: dynamicMethod],
        findByPriceLike: [Function: dynamicMethod],
        countByPrice: [Function: dynamicMethod],
        countByPriceIn: [Function: dynamicMethod],
        countByPriceLike: [Function: dynamicMethod],
        PriceStartsWith: [Function: dynamicMethod],
        PriceContains: [Function: dynamicMethod],
        PriceEndsWith: [Function: dynamicMethod],
        findOneByRemark: [Function: dynamicMethod],
        findOneByRemarkIn: [Function: dynamicMethod],
        findOneByRemarkLike: [Function: dynamicMethod],
        findByRemark: [Function: dynamicMethod],
        findByRemarkIn: [Function: dynamicMethod],
        findByRemarkLike: [Function: dynamicMethod],
        countByRemark: [Function: dynamicMethod],
        countByRemarkIn: [Function: dynamicMethod],
        countByRemarkLike: [Function: dynamicMethod],
        RemarkStartsWith: [Function: dynamicMethod],
        RemarkContains: [Function: dynamicMethod],
        RemarkEndsWith: [Function: dynamicMethod],
        findOneByCreatedAt: [Function: dynamicMethod],
        findOneByCreatedAtIn: [Function: dynamicMethod],
        findOneByCreatedAtLike: [Function: dynamicMethod],
        findByCreatedAt: [Function: dynamicMethod],
        findByCreatedAtIn: [Function: dynamicMethod],
        findByCreatedAtLike: [Function: dynamicMethod],
        countByCreatedAt: [Function: dynamicMethod],
        countByCreatedAtIn: [Function: dynamicMethod],
        countByCreatedAtLike: [Function: dynamicMethod],
        createdAtStartsWith: [Function: dynamicMethod],
        createdAtContains: [Function: dynamicMethod],
        createdAtEndsWith: [Function: dynamicMethod],
        findOneByUpdatedAt: [Function: dynamicMethod],
        findOneByUpdatedAtIn: [Function: dynamicMethod],
        findOneByUpdatedAtLike: [Function: dynamicMethod],
        findByUpdatedAt: [Function: dynamicMethod],
        findByUpdatedAtIn: [Function: dynamicMethod],
        findByUpdatedAtLike: [Function: dynamicMethod],
        countByUpdatedAt: [Function: dynamicMethod],
        countByUpdatedAtIn: [Function: dynamicMethod],
        countByUpdatedAtLike: [Function: dynamicMethod],
        updatedAtStartsWith: [Function: dynamicMethod],
        updatedAtContains: [Function: dynamicMethod],
        updatedAtEndsWith: [Function: dynamicMethod],
        definition: [Object],
        meta: [Object],
        schema: [Object] },
     t_subbom:
      child {
        connections: [Object],
        waterline: [Object],
        adapter: [Object],
        _attributes: [Object],
        defaults: [Object],
        _cast: [Object],
        _schema: [Object],
        _validator: [Object],
        _callbacks: [Object],
        _instanceMethods: {},
        hasSchema: true,
        migrate: 'alter',
        _model: [Object],
        primaryKey: 'ID',
        _transformer: [Object],
        adapterDictionary: [Object],
        emit: [Function],
        pkFormat: 'integer',
        syncable: true,
        escape: [Function],
        escapeId: [Function],
        registerConnection: [Function],
        teardown: [Function],
        query: [Function],
        define: [Function],
        addAttribute: [Function],
        removeAttribute: [Function],
        findOneByID: [Function: dynamicMethod],
        findOneByIDIn: [Function: dynamicMethod],
        findOneByIDLike: [Function: dynamicMethod],
        findByID: [Function: dynamicMethod],
        findByIDIn: [Function: dynamicMethod],
        findByIDLike: [Function: dynamicMethod],
        countByID: [Function: dynamicMethod],
        countByIDIn: [Function: dynamicMethod],
        countByIDLike: [Function: dynamicMethod],
        IDStartsWith: [Function: dynamicMethod],
        IDContains: [Function: dynamicMethod],
        IDEndsWith: [Function: dynamicMethod],
        findOneByMfr_Value: [Function: dynamicMethod],
        findOneByMfr_ValueIn: [Function: dynamicMethod],
        findOneByMfr_ValueLike: [Function: dynamicMethod],
        findByMfr_Value: [Function: dynamicMethod],
        findByMfr_ValueIn: [Function: dynamicMethod],
        findByMfr_ValueLike: [Function: dynamicMethod],
        countByMfr_Value: [Function: dynamicMethod],
        countByMfr_ValueIn: [Function: dynamicMethod],
        countByMfr_ValueLike: [Function: dynamicMethod],
        Mfr_ValueStartsWith: [Function: dynamicMethod],
        Mfr_ValueContains: [Function: dynamicMethod],
        Mfr_ValueEndsWith: [Function: dynamicMethod],
        findOneByMfr: [Function: dynamicMethod],
        findOneByMfrIn: [Function: dynamicMethod],
        findOneByMfrLike: [Function: dynamicMethod],
        findByMfr: [Function: dynamicMethod],
        findByMfrIn: [Function: dynamicMethod],
        findByMfrLike: [Function: dynamicMethod],
        countByMfr: [Function: dynamicMethod],
        countByMfrIn: [Function: dynamicMethod],
        countByMfrLike: [Function: dynamicMethod],
        MfrStartsWith: [Function: dynamicMethod],
        MfrContains: [Function: dynamicMethod],
        MfrEndsWith: [Function: dynamicMethod],
        findOneByNum: [Function: dynamicMethod],
        findOneByNumIn: [Function: dynamicMethod],
        findOneByNumLike: [Function: dynamicMethod],
        findByNum: [Function: dynamicMethod],
        findByNumIn: [Function: dynamicMethod],
        findByNumLike: [Function: dynamicMethod],
        countByNum: [Function: dynamicMethod],
        countByNumIn: [Function: dynamicMethod],
        countByNumLike: [Function: dynamicMethod],
        NumStartsWith: [Function: dynamicMethod],
        NumContains: [Function: dynamicMethod],
        NumEndsWith: [Function: dynamicMethod],
        findOneByWaring_Value: [Function: dynamicMethod],
        findOneByWaring_ValueIn: [Function: dynamicMethod],
        findOneByWaring_ValueLike: [Function: dynamicMethod],
        findByWaring_Value: [Function: dynamicMethod],
        findByWaring_ValueIn: [Function: dynamicMethod],
        findByWaring_ValueLike: [Function: dynamicMethod],
        countByWaring_Value: [Function: dynamicMethod],
        countByWaring_ValueIn: [Function: dynamicMethod],
        countByWaring_ValueLike: [Function: dynamicMethod],
        Waring_ValueStartsWith: [Function: dynamicMethod],
        Waring_ValueContains: [Function: dynamicMethod],
        Waring_ValueEndsWith: [Function: dynamicMethod],
        findOneByEncodeNum: [Function: dynamicMethod],
        findOneByEncodeNumIn: [Function: dynamicMethod],
        findOneByEncodeNumLike: [Function: dynamicMethod],
        findByEncodeNum: [Function: dynamicMethod],
        findByEncodeNumIn: [Function: dynamicMethod],
        findByEncodeNumLike: [Function: dynamicMethod],
        countByEncodeNum: [Function: dynamicMethod],
        countByEncodeNumIn: [Function: dynamicMethod],
        countByEncodeNumLike: [Function: dynamicMethod],
        EncodeNumStartsWith: [Function: dynamicMethod],
        EncodeNumContains: [Function: dynamicMethod],
        EncodeNumEndsWith: [Function: dynamicMethod],
        findOneByPrice: [Function: dynamicMethod],
        findOneByPriceIn: [Function: dynamicMethod],
        findOneByPriceLike: [Function: dynamicMethod],
        findByPrice: [Function: dynamicMethod],
        findByPriceIn: [Function: dynamicMethod],
        findByPriceLike: [Function: dynamicMethod],
        countByPrice: [Function: dynamicMethod],
        countByPriceIn: [Function: dynamicMethod],
        countByPriceLike: [Function: dynamicMethod],
        PriceStartsWith: [Function: dynamicMethod],
        PriceContains: [Function: dynamicMethod],
        PriceEndsWith: [Function: dynamicMethod],
        findOneByRemark: [Function: dynamicMethod],
        findOneByRemarkIn: [Function: dynamicMethod],
        findOneByRemarkLike: [Function: dynamicMethod],
        findByRemark: [Function: dynamicMethod],
        findByRemarkIn: [Function: dynamicMethod],
        findByRemarkLike: [Function: dynamicMethod],
        countByRemark: [Function: dynamicMethod],
        countByRemarkIn: [Function: dynamicMethod],
        countByRemarkLike: [Function: dynamicMethod],
        RemarkStartsWith: [Function: dynamicMethod],
        RemarkContains: [Function: dynamicMethod],
        RemarkEndsWith: [Function: dynamicMethod],
        findOneByCreatedAt: [Function: dynamicMethod],
        findOneByCreatedAtIn: [Function: dynamicMethod],
        findOneByCreatedAtLike: [Function: dynamicMethod],
        findByCreatedAt: [Function: dynamicMethod],
        findByCreatedAtIn: [Function: dynamicMethod],
        findByCreatedAtLike: [Function: dynamicMethod],
        countByCreatedAt: [Function: dynamicMethod],
        countByCreatedAtIn: [Function: dynamicMethod],
        countByCreatedAtLike: [Function: dynamicMethod],
        createdAtStartsWith: [Function: dynamicMethod],
        createdAtContains: [Function: dynamicMethod],
        createdAtEndsWith: [Function: dynamicMethod],
        findOneByUpdatedAt: [Function: dynamicMethod],
        findOneByUpdatedAtIn: [Function: dynamicMethod],
        findOneByUpdatedAtLike: [Function: dynamicMethod],
        findByUpdatedAt: [Function: dynamicMethod],
        findByUpdatedAtIn: [Function: dynamicMethod],
        findByUpdatedAtLike: [Function: dynamicMethod],
        countByUpdatedAt: [Function: dynamicMethod],
        countByUpdatedAtIn: [Function: dynamicMethod],
        countByUpdatedAtLike: [Function: dynamicMethod],
        updatedAtStartsWith: [Function: dynamicMethod],
        updatedAtContains: [Function: dynamicMethod],
        updatedAtEndsWith: [Function: dynamicMethod],
        definition: [Object],
        meta: [Object],
        schema: [Object] } },
  route:
   Route {
     path: '/upfilesubbomnum',
     stack: [ [Object] ],
     methods: { post: true } } } {}
POST /api/upfilesubbomnum 200 461.703 ms - 53
IncomingMessage {
  _readableState:
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        bytesRead: 14273,
        _externalStream: [External],
        fd: -1,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events:
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Array],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 1120 },
     _server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 1120 },
     _idleTimeout: 120000,
     _idleNext:
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev:
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 149572,
     _destroyed: false,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage:
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        _startAt: undefined,
        _startTime: undefined,
        writeHead: [Function: writeHead],
        __onFinished: [Object],
        [Symbol(outHeadersKey)]: [Object] },
     _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 51163 },
     [Symbol(asyncId)]: 1568,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 1570,
     [Symbol(triggerId)]: 1120 },
  connection:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        bytesRead: 14273,
        _externalStream: [External],
        fd: -1,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events:
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Array],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 1120 },
     _server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 1120 },
     _idleTimeout: 120000,
     _idleNext:
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev:
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 149572,
     _destroyed: false,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage:
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        _startAt: undefined,
        _startTime: undefined,
        writeHead: [Function: writeHead],
        __onFinished: [Object],
        [Symbol(outHeadersKey)]: [Object] },
     _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 51163 },
     [Symbol(asyncId)]: 1568,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 1570,
     [Symbol(triggerId)]: 1120 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers:
   { cookie: 'Admin-Token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoiYWRtaW4iLCJleHAiOjE1MTMzMDY5NjR9.cAQNI6NHh8OUZgpQPCrXUE1t78fE5WHrExHGu2ZJ7XY',
     'accept-language': 'zh-CN,zh;q=0.8',
     'accept-encoding': 'gzip, deflate, br',
     referer: 'http://localhost:9528/',
     accept: '*/*',
     'content-type': 'multipart/form-data; boundary=----WebKitFormBoundaryZYlc6Ogj0SsBeUp8',
     'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36',
     origin: 'http://localhost:9528',
     'content-length': '13665',
     connection: 'close',
     host: 'localhost:3000' },
  rawHeaders:
   [ 'cookie',
     'Admin-Token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoiYWRtaW4iLCJleHAiOjE1MTMzMDY5NjR9.cAQNI6NHh8OUZgpQPCrXUE1t78fE5WHrExHGu2ZJ7XY',
     'accept-language',
     'zh-CN,zh;q=0.8',
     'accept-encoding',
     'gzip, deflate, br',
     'referer',
     'http://localhost:9528/',
     'accept',
     '*/*',
     'content-type',
     'multipart/form-data; boundary=----WebKitFormBoundaryZYlc6Ogj0SsBeUp8',
     'user-agent',
     'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36',
     'origin',
     'http://localhost:9528',
     'content-length',
     '13665',
     'connection',
     'close',
     'host',
     'localhost:3000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/upfilesubbomnum',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        bytesRead: 14273,
        _externalStream: [External],
        fd: -1,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events:
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Array],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 1120 },
     _server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 1120 },
     _idleTimeout: 120000,
     _idleNext:
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev:
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 149572,
     _destroyed: false,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage:
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        _startAt: undefined,
        _startTime: undefined,
        writeHead: [Function: writeHead],
        __onFinished: [Object],
        [Symbol(outHeadersKey)]: [Object] },
     _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 51163 },
     [Symbol(asyncId)]: 1568,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 1570,
     [Symbol(triggerId)]: 1120 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '/api',
  originalUrl: '/api/upfilesubbomnum',
  _parsedUrl:
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/upfilesubbomnum',
     path: '/upfilesubbomnum',
     href: '/upfilesubbomnum',
     _raw: '/upfilesubbomnum' },
  params: {},
  query: {},
  res:
   ServerResponse {
     domain: null,
     _events: { finish: [Array], end: [Function: onevent] },
     _eventsCount: 2,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 149572,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        _peername: [Object],
        [Symbol(asyncId)]: 1568,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 1570,
        [Symbol(triggerId)]: 1120 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 149572,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        _peername: [Object],
        [Symbol(asyncId)]: 1568,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 1570,
        [Symbol(triggerId)]: 1120 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     _startAt: undefined,
     _startTime: undefined,
     writeHead: [Function: writeHead],
     __onFinished: { [Function: listener] queue: [Array] },
     [Symbol(outHeadersKey)]: { 'x-powered-by': [Array] } },
  _startAt: [ 2416388, 988568098 ],
  _startTime: 2017-12-14T09:33:58.027Z,
  _remoteAddress: '::ffff:127.0.0.1',
  body: {},
  secret: undefined,
  cookies: { 'Admin-Token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoiYWRtaW4iLCJleHAiOjE1MTMzMDY5NjR9.cAQNI6NHh8OUZgpQPCrXUE1t78fE5WHrExHGu2ZJ7XY' },
  signedCookies: {},
  models:
   { t_user:
      child {
        connections: [Object],
        waterline: [Object],
        adapter: [Object],
        _attributes: [Object],
        defaults: [Object],
        _cast: [Object],
        _schema: [Object],
        _validator: [Object],
        _callbacks: [Object],
        _instanceMethods: {},
        hasSchema: true,
        migrate: 'alter',
        _model: [Object],
        primaryKey: 'ID',
        _transformer: [Object],
        adapterDictionary: [Object],
        emit: [Function],
        pkFormat: 'integer',
        syncable: true,
        escape: [Function],
        escapeId: [Function],
        registerConnection: [Function],
        teardown: [Function],
        query: [Function],
        define: [Function],
        addAttribute: [Function],
        removeAttribute: [Function],
        findOneByID: [Function: dynamicMethod],
        findOneByIDIn: [Function: dynamicMethod],
        findOneByIDLike: [Function: dynamicMethod],
        findByID: [Function: dynamicMethod],
        findByIDIn: [Function: dynamicMethod],
        findByIDLike: [Function: dynamicMethod],
        countByID: [Function: dynamicMethod],
        countByIDIn: [Function: dynamicMethod],
        countByIDLike: [Function: dynamicMethod],
        IDStartsWith: [Function: dynamicMethod],
        IDContains: [Function: dynamicMethod],
        IDEndsWith: [Function: dynamicMethod],
        findOneByUsername: [Function: dynamicMethod],
        findOneByUsernameIn: [Function: dynamicMethod],
        findOneByUsernameLike: [Function: dynamicMethod],
        findByUsername: [Function: dynamicMethod],
        findByUsernameIn: [Function: dynamicMethod],
        findByUsernameLike: [Function: dynamicMethod],
        countByUsername: [Function: dynamicMethod],
        countByUsernameIn: [Function: dynamicMethod],
        countByUsernameLike: [Function: dynamicMethod],
        usernameStartsWith: [Function: dynamicMethod],
        usernameContains: [Function: dynamicMethod],
        usernameEndsWith: [Function: dynamicMethod],
        findOneByPassword: [Function: dynamicMethod],
        findOneByPasswordIn: [Function: dynamicMethod],
        findOneByPasswordLike: [Function: dynamicMethod],
        findByPassword: [Function: dynamicMethod],
        findByPasswordIn: [Function: dynamicMethod],
        findByPasswordLike: [Function: dynamicMethod],
        countByPassword: [Function: dynamicMethod],
        countByPasswordIn: [Function: dynamicMethod],
        countByPasswordLike: [Function: dynamicMethod],
        passwordStartsWith: [Function: dynamicMethod],
        passwordContains: [Function: dynamicMethod],
        passwordEndsWith: [Function: dynamicMethod],
        findOneByAdmin: [Function: dynamicMethod],
        findOneByAdminIn: [Function: dynamicMethod],
        findOneByAdminLike: [Function: dynamicMethod],
        findByAdmin: [Function: dynamicMethod],
        findByAdminIn: [Function: dynamicMethod],
        findByAdminLike: [Function: dynamicMethod],
        countByAdmin: [Function: dynamicMethod],
        countByAdminIn: [Function: dynamicMethod],
        countByAdminLike: [Function: dynamicMethod],
        adminStartsWith: [Function: dynamicMethod],
        adminContains: [Function: dynamicMethod],
        adminEndsWith: [Function: dynamicMethod],
        findOneByAvatar: [Function: dynamicMethod],
        findOneByAvatarIn: [Function: dynamicMethod],
        findOneByAvatarLike: [Function: dynamicMethod],
        findByAvatar: [Function: dynamicMethod],
        findByAvatarIn: [Function: dynamicMethod],
        findByAvatarLike: [Function: dynamicMethod],
        countByAvatar: [Function: dynamicMethod],
        countByAvatarIn: [Function: dynamicMethod],
        countByAvatarLike: [Function: dynamicMethod],
        avatarStartsWith: [Function: dynamicMethod],
        avatarContains: [Function: dynamicMethod],
        avatarEndsWith: [Function: dynamicMethod],
        findOneByCreatedAt: [Function: dynamicMethod],
        findOneByCreatedAtIn: [Function: dynamicMethod],
        findOneByCreatedAtLike: [Function: dynamicMethod],
        findByCreatedAt: [Function: dynamicMethod],
        findByCreatedAtIn: [Function: dynamicMethod],
        findByCreatedAtLike: [Function: dynamicMethod],
        countByCreatedAt: [Function: dynamicMethod],
        countByCreatedAtIn: [Function: dynamicMethod],
        countByCreatedAtLike: [Function: dynamicMethod],
        createdAtStartsWith: [Function: dynamicMethod],
        createdAtContains: [Function: dynamicMethod],
        createdAtEndsWith: [Function: dynamicMethod],
        findOneByUpdatedAt: [Function: dynamicMethod],
        findOneByUpdatedAtIn: [Function: dynamicMethod],
        findOneByUpdatedAtLike: [Function: dynamicMethod],
        findByUpdatedAt: [Function: dynamicMethod],
        findByUpdatedAtIn: [Function: dynamicMethod],
        findByUpdatedAtLike: [Function: dynamicMethod],
        countByUpdatedAt: [Function: dynamicMethod],
        countByUpdatedAtIn: [Function: dynamicMethod],
        countByUpdatedAtLike: [Function: dynamicMethod],
        updatedAtStartsWith: [Function: dynamicMethod],
        updatedAtContains: [Function: dynamicMethod],
        updatedAtEndsWith: [Function: dynamicMethod],
        definition: [Object],
        meta: [Object],
        schema: [Object] },
     t_bom:
      child {
        connections: [Object],
        waterline: [Object],
        adapter: [Object],
        _attributes: [Object],
        defaults: [Object],
        _cast: [Object],
        _schema: [Object],
        _validator: [Object],
        _callbacks: [Object],
        _instanceMethods: {},
        hasSchema: true,
        migrate: 'alter',
        _model: [Object],
        primaryKey: 'ID',
        _transformer: [Object],
        adapterDictionary: [Object],
        emit: [Function],
        pkFormat: 'integer',
        syncable: true,
        escape: [Function],
        escapeId: [Function],
        registerConnection: [Function],
        teardown: [Function],
        query: [Function],
        define: [Function],
        addAttribute: [Function],
        removeAttribute: [Function],
        findOneByID: [Function: dynamicMethod],
        findOneByIDIn: [Function: dynamicMethod],
        findOneByIDLike: [Function: dynamicMethod],
        findByID: [Function: dynamicMethod],
        findByIDIn: [Function: dynamicMethod],
        findByIDLike: [Function: dynamicMethod],
        countByID: [Function: dynamicMethod],
        countByIDIn: [Function: dynamicMethod],
        countByIDLike: [Function: dynamicMethod],
        IDStartsWith: [Function: dynamicMethod],
        IDContains: [Function: dynamicMethod],
        IDEndsWith: [Function: dynamicMethod],
        findOneByMfr_Value: [Function: dynamicMethod],
        findOneByMfr_ValueIn: [Function: dynamicMethod],
        findOneByMfr_ValueLike: [Function: dynamicMethod],
        findByMfr_Value: [Function: dynamicMethod],
        findByMfr_ValueIn: [Function: dynamicMethod],
        findByMfr_ValueLike: [Function: dynamicMethod],
        countByMfr_Value: [Function: dynamicMethod],
        countByMfr_ValueIn: [Function: dynamicMethod],
        countByMfr_ValueLike: [Function: dynamicMethod],
        Mfr_ValueStartsWith: [Function: dynamicMethod],
        Mfr_ValueContains: [Function: dynamicMethod],
        Mfr_ValueEndsWith: [Function: dynamicMethod],
        findOneByMfr: [Function: dynamicMethod],
        findOneByMfrIn: [Function: dynamicMethod],
        findOneByMfrLike: [Function: dynamicMethod],
        findByMfr: [Function: dynamicMethod],
        findByMfrIn: [Function: dynamicMethod],
        findByMfrLike: [Function: dynamicMethod],
        countByMfr: [Function: dynamicMethod],
        countByMfrIn: [Function: dynamicMethod],
        countByMfrLike: [Function: dynamicMethod],
        MfrStartsWith: [Function: dynamicMethod],
        MfrContains: [Function: dynamicMethod],
        MfrEndsWith: [Function: dynamicMethod],
        findOneByNum: [Function: dynamicMethod],
        findOneByNumIn: [Function: dynamicMethod],
        findOneByNumLike: [Function: dynamicMethod],
        findByNum: [Function: dynamicMethod],
        findByNumIn: [Function: dynamicMethod],
        findByNumLike: [Function: dynamicMethod],
        countByNum: [Function: dynamicMethod],
        countByNumIn: [Function: dynamicMethod],
        countByNumLike: [Function: dynamicMethod],
        NumStartsWith: [Function: dynamicMethod],
        NumContains: [Function: dynamicMethod],
        NumEndsWith: [Function: dynamicMethod],
        findOneByWaring_Value: [Function: dynamicMethod],
        findOneByWaring_ValueIn: [Function: dynamicMethod],
        findOneByWaring_ValueLike: [Function: dynamicMethod],
        findByWaring_Value: [Function: dynamicMethod],
        findByWaring_ValueIn: [Function: dynamicMethod],
        findByWaring_ValueLike: [Function: dynamicMethod],
        countByWaring_Value: [Function: dynamicMethod],
        countByWaring_ValueIn: [Function: dynamicMethod],
        countByWaring_ValueLike: [Function: dynamicMethod],
        Waring_ValueStartsWith: [Function: dynamicMethod],
        Waring_ValueContains: [Function: dynamicMethod],
        Waring_ValueEndsWith: [Function: dynamicMethod],
        findOneByEncodeNum: [Function: dynamicMethod],
        findOneByEncodeNumIn: [Function: dynamicMethod],
        findOneByEncodeNumLike: [Function: dynamicMethod],
        findByEncodeNum: [Function: dynamicMethod],
        findByEncodeNumIn: [Function: dynamicMethod],
        findByEncodeNumLike: [Function: dynamicMethod],
        countByEncodeNum: [Function: dynamicMethod],
        countByEncodeNumIn: [Function: dynamicMethod],
        countByEncodeNumLike: [Function: dynamicMethod],
        EncodeNumStartsWith: [Function: dynamicMethod],
        EncodeNumContains: [Function: dynamicMethod],
        EncodeNumEndsWith: [Function: dynamicMethod],
        findOneByPrice: [Function: dynamicMethod],
        findOneByPriceIn: [Function: dynamicMethod],
        findOneByPriceLike: [Function: dynamicMethod],
        findByPrice: [Function: dynamicMethod],
        findByPriceIn: [Function: dynamicMethod],
        findByPriceLike: [Function: dynamicMethod],
        countByPrice: [Function: dynamicMethod],
        countByPriceIn: [Function: dynamicMethod],
        countByPriceLike: [Function: dynamicMethod],
        PriceStartsWith: [Function: dynamicMethod],
        PriceContains: [Function: dynamicMethod],
        PriceEndsWith: [Function: dynamicMethod],
        findOneByRemark: [Function: dynamicMethod],
        findOneByRemarkIn: [Function: dynamicMethod],
        findOneByRemarkLike: [Function: dynamicMethod],
        findByRemark: [Function: dynamicMethod],
        findByRemarkIn: [Function: dynamicMethod],
        findByRemarkLike: [Function: dynamicMethod],
        countByRemark: [Function: dynamicMethod],
        countByRemarkIn: [Function: dynamicMethod],
        countByRemarkLike: [Function: dynamicMethod],
        RemarkStartsWith: [Function: dynamicMethod],
        RemarkContains: [Function: dynamicMethod],
        RemarkEndsWith: [Function: dynamicMethod],
        findOneByCreatedAt: [Function: dynamicMethod],
        findOneByCreatedAtIn: [Function: dynamicMethod],
        findOneByCreatedAtLike: [Function: dynamicMethod],
        findByCreatedAt: [Function: dynamicMethod],
        findByCreatedAtIn: [Function: dynamicMethod],
        findByCreatedAtLike: [Function: dynamicMethod],
        countByCreatedAt: [Function: dynamicMethod],
        countByCreatedAtIn: [Function: dynamicMethod],
        countByCreatedAtLike: [Function: dynamicMethod],
        createdAtStartsWith: [Function: dynamicMethod],
        createdAtContains: [Function: dynamicMethod],
        createdAtEndsWith: [Function: dynamicMethod],
        findOneByUpdatedAt: [Function: dynamicMethod],
        findOneByUpdatedAtIn: [Function: dynamicMethod],
        findOneByUpdatedAtLike: [Function: dynamicMethod],
        findByUpdatedAt: [Function: dynamicMethod],
        findByUpdatedAtIn: [Function: dynamicMethod],
        findByUpdatedAtLike: [Function: dynamicMethod],
        countByUpdatedAt: [Function: dynamicMethod],
        countByUpdatedAtIn: [Function: dynamicMethod],
        countByUpdatedAtLike: [Function: dynamicMethod],
        updatedAtStartsWith: [Function: dynamicMethod],
        updatedAtContains: [Function: dynamicMethod],
        updatedAtEndsWith: [Function: dynamicMethod],
        definition: [Object],
        meta: [Object],
        schema: [Object] },
     t_addbom:
      child {
        connections: [Object],
        waterline: [Object],
        adapter: [Object],
        _attributes: [Object],
        defaults: [Object],
        _cast: [Object],
        _schema: [Object],
        _validator: [Object],
        _callbacks: [Object],
        _instanceMethods: {},
        hasSchema: true,
        migrate: 'alter',
        _model: [Object],
        primaryKey: 'ID',
        _transformer: [Object],
        adapterDictionary: [Object],
        emit: [Function],
        pkFormat: 'integer',
        syncable: true,
        escape: [Function],
        escapeId: [Function],
        registerConnection: [Function],
        teardown: [Function],
        query: [Function],
        define: [Function],
        addAttribute: [Function],
        removeAttribute: [Function],
        findOneByID: [Function: dynamicMethod],
        findOneByIDIn: [Function: dynamicMethod],
        findOneByIDLike: [Function: dynamicMethod],
        findByID: [Function: dynamicMethod],
        findByIDIn: [Function: dynamicMethod],
        findByIDLike: [Function: dynamicMethod],
        countByID: [Function: dynamicMethod],
        countByIDIn: [Function: dynamicMethod],
        countByIDLike: [Function: dynamicMethod],
        IDStartsWith: [Function: dynamicMethod],
        IDContains: [Function: dynamicMethod],
        IDEndsWith: [Function: dynamicMethod],
        findOneByMfr_Value: [Function: dynamicMethod],
        findOneByMfr_ValueIn: [Function: dynamicMethod],
        findOneByMfr_ValueLike: [Function: dynamicMethod],
        findByMfr_Value: [Function: dynamicMethod],
        findByMfr_ValueIn: [Function: dynamicMethod],
        findByMfr_ValueLike: [Function: dynamicMethod],
        countByMfr_Value: [Function: dynamicMethod],
        countByMfr_ValueIn: [Function: dynamicMethod],
        countByMfr_ValueLike: [Function: dynamicMethod],
        Mfr_ValueStartsWith: [Function: dynamicMethod],
        Mfr_ValueContains: [Function: dynamicMethod],
        Mfr_ValueEndsWith: [Function: dynamicMethod],
        findOneByMfr: [Function: dynamicMethod],
        findOneByMfrIn: [Function: dynamicMethod],
        findOneByMfrLike: [Function: dynamicMethod],
        findByMfr: [Function: dynamicMethod],
        findByMfrIn: [Function: dynamicMethod],
        findByMfrLike: [Function: dynamicMethod],
        countByMfr: [Function: dynamicMethod],
        countByMfrIn: [Function: dynamicMethod],
        countByMfrLike: [Function: dynamicMethod],
        MfrStartsWith: [Function: dynamicMethod],
        MfrContains: [Function: dynamicMethod],
        MfrEndsWith: [Function: dynamicMethod],
        findOneByNum: [Function: dynamicMethod],
        findOneByNumIn: [Function: dynamicMethod],
        findOneByNumLike: [Function: dynamicMethod],
        findByNum: [Function: dynamicMethod],
        findByNumIn: [Function: dynamicMethod],
        findByNumLike: [Function: dynamicMethod],
        countByNum: [Function: dynamicMethod],
        countByNumIn: [Function: dynamicMethod],
        countByNumLike: [Function: dynamicMethod],
        NumStartsWith: [Function: dynamicMethod],
        NumContains: [Function: dynamicMethod],
        NumEndsWith: [Function: dynamicMethod],
        findOneByWaring_Value: [Function: dynamicMethod],
        findOneByWaring_ValueIn: [Function: dynamicMethod],
        findOneByWaring_ValueLike: [Function: dynamicMethod],
        findByWaring_Value: [Function: dynamicMethod],
        findByWaring_ValueIn: [Function: dynamicMethod],
        findByWaring_ValueLike: [Function: dynamicMethod],
        countByWaring_Value: [Function: dynamicMethod],
        countByWaring_ValueIn: [Function: dynamicMethod],
        countByWaring_ValueLike: [Function: dynamicMethod],
        Waring_ValueStartsWith: [Function: dynamicMethod],
        Waring_ValueContains: [Function: dynamicMethod],
        Waring_ValueEndsWith: [Function: dynamicMethod],
        findOneByEncodeNum: [Function: dynamicMethod],
        findOneByEncodeNumIn: [Function: dynamicMethod],
        findOneByEncodeNumLike: [Function: dynamicMethod],
        findByEncodeNum: [Function: dynamicMethod],
        findByEncodeNumIn: [Function: dynamicMethod],
        findByEncodeNumLike: [Function: dynamicMethod],
        countByEncodeNum: [Function: dynamicMethod],
        countByEncodeNumIn: [Function: dynamicMethod],
        countByEncodeNumLike: [Function: dynamicMethod],
        EncodeNumStartsWith: [Function: dynamicMethod],
        EncodeNumContains: [Function: dynamicMethod],
        EncodeNumEndsWith: [Function: dynamicMethod],
        findOneByPrice: [Function: dynamicMethod],
        findOneByPriceIn: [Function: dynamicMethod],
        findOneByPriceLike: [Function: dynamicMethod],
        findByPrice: [Function: dynamicMethod],
        findByPriceIn: [Function: dynamicMethod],
        findByPriceLike: [Function: dynamicMethod],
        countByPrice: [Function: dynamicMethod],
        countByPriceIn: [Function: dynamicMethod],
        countByPriceLike: [Function: dynamicMethod],
        PriceStartsWith: [Function: dynamicMethod],
        PriceContains: [Function: dynamicMethod],
        PriceEndsWith: [Function: dynamicMethod],
        findOneByRemark: [Function: dynamicMethod],
        findOneByRemarkIn: [Function: dynamicMethod],
        findOneByRemarkLike: [Function: dynamicMethod],
        findByRemark: [Function: dynamicMethod],
        findByRemarkIn: [Function: dynamicMethod],
        findByRemarkLike: [Function: dynamicMethod],
        countByRemark: [Function: dynamicMethod],
        countByRemarkIn: [Function: dynamicMethod],
        countByRemarkLike: [Function: dynamicMethod],
        RemarkStartsWith: [Function: dynamicMethod],
        RemarkContains: [Function: dynamicMethod],
        RemarkEndsWith: [Function: dynamicMethod],
        findOneByCreatedAt: [Function: dynamicMethod],
        findOneByCreatedAtIn: [Function: dynamicMethod],
        findOneByCreatedAtLike: [Function: dynamicMethod],
        findByCreatedAt: [Function: dynamicMethod],
        findByCreatedAtIn: [Function: dynamicMethod],
        findByCreatedAtLike: [Function: dynamicMethod],
        countByCreatedAt: [Function: dynamicMethod],
        countByCreatedAtIn: [Function: dynamicMethod],
        countByCreatedAtLike: [Function: dynamicMethod],
        createdAtStartsWith: [Function: dynamicMethod],
        createdAtContains: [Function: dynamicMethod],
        createdAtEndsWith: [Function: dynamicMethod],
        findOneByUpdatedAt: [Function: dynamicMethod],
        findOneByUpdatedAtIn: [Function: dynamicMethod],
        findOneByUpdatedAtLike: [Function: dynamicMethod],
        findByUpdatedAt: [Function: dynamicMethod],
        findByUpdatedAtIn: [Function: dynamicMethod],
        findByUpdatedAtLike: [Function: dynamicMethod],
        countByUpdatedAt: [Function: dynamicMethod],
        countByUpdatedAtIn: [Function: dynamicMethod],
        countByUpdatedAtLike: [Function: dynamicMethod],
        updatedAtStartsWith: [Function: dynamicMethod],
        updatedAtContains: [Function: dynamicMethod],
        updatedAtEndsWith: [Function: dynamicMethod],
        definition: [Object],
        meta: [Object],
        schema: [Object] },
     t_subbom:
      child {
        connections: [Object],
        waterline: [Object],
        adapter: [Object],
        _attributes: [Object],
        defaults: [Object],
        _cast: [Object],
        _schema: [Object],
        _validator: [Object],
        _callbacks: [Object],
        _instanceMethods: {},
        hasSchema: true,
        migrate: 'alter',
        _model: [Object],
        primaryKey: 'ID',
        _transformer: [Object],
        adapterDictionary: [Object],
        emit: [Function],
        pkFormat: 'integer',
        syncable: true,
        escape: [Function],
        escapeId: [Function],
        registerConnection: [Function],
        teardown: [Function],
        query: [Function],
        define: [Function],
        addAttribute: [Function],
        removeAttribute: [Function],
        findOneByID: [Function: dynamicMethod],
        findOneByIDIn: [Function: dynamicMethod],
        findOneByIDLike: [Function: dynamicMethod],
        findByID: [Function: dynamicMethod],
        findByIDIn: [Function: dynamicMethod],
        findByIDLike: [Function: dynamicMethod],
        countByID: [Function: dynamicMethod],
        countByIDIn: [Function: dynamicMethod],
        countByIDLike: [Function: dynamicMethod],
        IDStartsWith: [Function: dynamicMethod],
        IDContains: [Function: dynamicMethod],
        IDEndsWith: [Function: dynamicMethod],
        findOneByMfr_Value: [Function: dynamicMethod],
        findOneByMfr_ValueIn: [Function: dynamicMethod],
        findOneByMfr_ValueLike: [Function: dynamicMethod],
        findByMfr_Value: [Function: dynamicMethod],
        findByMfr_ValueIn: [Function: dynamicMethod],
        findByMfr_ValueLike: [Function: dynamicMethod],
        countByMfr_Value: [Function: dynamicMethod],
        countByMfr_ValueIn: [Function: dynamicMethod],
        countByMfr_ValueLike: [Function: dynamicMethod],
        Mfr_ValueStartsWith: [Function: dynamicMethod],
        Mfr_ValueContains: [Function: dynamicMethod],
        Mfr_ValueEndsWith: [Function: dynamicMethod],
        findOneByMfr: [Function: dynamicMethod],
        findOneByMfrIn: [Function: dynamicMethod],
        findOneByMfrLike: [Function: dynamicMethod],
        findByMfr: [Function: dynamicMethod],
        findByMfrIn: [Function: dynamicMethod],
        findByMfrLike: [Function: dynamicMethod],
        countByMfr: [Function: dynamicMethod],
        countByMfrIn: [Function: dynamicMethod],
        countByMfrLike: [Function: dynamicMethod],
        MfrStartsWith: [Function: dynamicMethod],
        MfrContains: [Function: dynamicMethod],
        MfrEndsWith: [Function: dynamicMethod],
        findOneByNum: [Function: dynamicMethod],
        findOneByNumIn: [Function: dynamicMethod],
        findOneByNumLike: [Function: dynamicMethod],
        findByNum: [Function: dynamicMethod],
        findByNumIn: [Function: dynamicMethod],
        findByNumLike: [Function: dynamicMethod],
        countByNum: [Function: dynamicMethod],
        countByNumIn: [Function: dynamicMethod],
        countByNumLike: [Function: dynamicMethod],
        NumStartsWith: [Function: dynamicMethod],
        NumContains: [Function: dynamicMethod],
        NumEndsWith: [Function: dynamicMethod],
        findOneByWaring_Value: [Function: dynamicMethod],
        findOneByWaring_ValueIn: [Function: dynamicMethod],
        findOneByWaring_ValueLike: [Function: dynamicMethod],
        findByWaring_Value: [Function: dynamicMethod],
        findByWaring_ValueIn: [Function: dynamicMethod],
        findByWaring_ValueLike: [Function: dynamicMethod],
        countByWaring_Value: [Function: dynamicMethod],
        countByWaring_ValueIn: [Function: dynamicMethod],
        countByWaring_ValueLike: [Function: dynamicMethod],
        Waring_ValueStartsWith: [Function: dynamicMethod],
        Waring_ValueContains: [Function: dynamicMethod],
        Waring_ValueEndsWith: [Function: dynamicMethod],
        findOneByEncodeNum: [Function: dynamicMethod],
        findOneByEncodeNumIn: [Function: dynamicMethod],
        findOneByEncodeNumLike: [Function: dynamicMethod],
        findByEncodeNum: [Function: dynamicMethod],
        findByEncodeNumIn: [Function: dynamicMethod],
        findByEncodeNumLike: [Function: dynamicMethod],
        countByEncodeNum: [Function: dynamicMethod],
        countByEncodeNumIn: [Function: dynamicMethod],
        countByEncodeNumLike: [Function: dynamicMethod],
        EncodeNumStartsWith: [Function: dynamicMethod],
        EncodeNumContains: [Function: dynamicMethod],
        EncodeNumEndsWith: [Function: dynamicMethod],
        findOneByPrice: [Function: dynamicMethod],
        findOneByPriceIn: [Function: dynamicMethod],
        findOneByPriceLike: [Function: dynamicMethod],
        findByPrice: [Function: dynamicMethod],
        findByPriceIn: [Function: dynamicMethod],
        findByPriceLike: [Function: dynamicMethod],
        countByPrice: [Function: dynamicMethod],
        countByPriceIn: [Function: dynamicMethod],
        countByPriceLike: [Function: dynamicMethod],
        PriceStartsWith: [Function: dynamicMethod],
        PriceContains: [Function: dynamicMethod],
        PriceEndsWith: [Function: dynamicMethod],
        findOneByRemark: [Function: dynamicMethod],
        findOneByRemarkIn: [Function: dynamicMethod],
        findOneByRemarkLike: [Function: dynamicMethod],
        findByRemark: [Function: dynamicMethod],
        findByRemarkIn: [Function: dynamicMethod],
        findByRemarkLike: [Function: dynamicMethod],
        countByRemark: [Function: dynamicMethod],
        countByRemarkIn: [Function: dynamicMethod],
        countByRemarkLike: [Function: dynamicMethod],
        RemarkStartsWith: [Function: dynamicMethod],
        RemarkContains: [Function: dynamicMethod],
        RemarkEndsWith: [Function: dynamicMethod],
        findOneByCreatedAt: [Function: dynamicMethod],
        findOneByCreatedAtIn: [Function: dynamicMethod],
        findOneByCreatedAtLike: [Function: dynamicMethod],
        findByCreatedAt: [Function: dynamicMethod],
        findByCreatedAtIn: [Function: dynamicMethod],
        findByCreatedAtLike: [Function: dynamicMethod],
        countByCreatedAt: [Function: dynamicMethod],
        countByCreatedAtIn: [Function: dynamicMethod],
        countByCreatedAtLike: [Function: dynamicMethod],
        createdAtStartsWith: [Function: dynamicMethod],
        createdAtContains: [Function: dynamicMethod],
        createdAtEndsWith: [Function: dynamicMethod],
        findOneByUpdatedAt: [Function: dynamicMethod],
        findOneByUpdatedAtIn: [Function: dynamicMethod],
        findOneByUpdatedAtLike: [Function: dynamicMethod],
        findByUpdatedAt: [Function: dynamicMethod],
        findByUpdatedAtIn: [Function: dynamicMethod],
        findByUpdatedAtLike: [Function: dynamicMethod],
        countByUpdatedAt: [Function: dynamicMethod],
        countByUpdatedAtIn: [Function: dynamicMethod],
        countByUpdatedAtLike: [Function: dynamicMethod],
        updatedAtStartsWith: [Function: dynamicMethod],
        updatedAtContains: [Function: dynamicMethod],
        updatedAtEndsWith: [Function: dynamicMethod],
        definition: [Object],
        meta: [Object],
        schema: [Object] } },
  route:
   Route {
     path: '/upfilesubbomnum',
     stack: [ [Object] ],
     methods: { post: true } } } {}
POST /api/upfilesubbomnum 200 351.064 ms - 53
IncomingMessage {
  _readableState:
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: true,
  domain: null,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        bytesRead: 608,
        _externalStream: [External],
        fd: -1,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events:
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Array],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 1120 },
     _server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 1120 },
     _idleTimeout: 120000,
     _idleNext:
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev:
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 307635,
     _destroyed: false,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage:
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        _startAt: undefined,
        _startTime: undefined,
        writeHead: [Function: writeHead],
        __onFinished: [Object],
        [Symbol(outHeadersKey)]: [Object] },
     _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 51181 },
     [Symbol(asyncId)]: 2006,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 2008,
     [Symbol(triggerId)]: 1120 },
  connection:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        bytesRead: 608,
        _externalStream: [External],
        fd: -1,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events:
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Array],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 1120 },
     _server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 1120 },
     _idleTimeout: 120000,
     _idleNext:
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev:
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 307635,
     _destroyed: false,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage:
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        _startAt: undefined,
        _startTime: undefined,
        writeHead: [Function: writeHead],
        __onFinished: [Object],
        [Symbol(outHeadersKey)]: [Object] },
     _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 51181 },
     [Symbol(asyncId)]: 2006,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 2008,
     [Symbol(triggerId)]: 1120 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: false,
  headers:
   { cookie: 'Admin-Token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoiYWRtaW4iLCJleHAiOjE1MTMzMDY5NjR9.cAQNI6NHh8OUZgpQPCrXUE1t78fE5WHrExHGu2ZJ7XY',
     'accept-language': 'zh-CN,zh;q=0.8',
     'accept-encoding': 'gzip, deflate, br',
     referer: 'http://localhost:9528/',
     accept: '*/*',
     'content-type': 'multipart/form-data; boundary=----WebKitFormBoundaryt0jlVQnsNQJJpkPL',
     'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36',
     origin: 'http://localhost:9528',
     'content-length': '13665',
     connection: 'close',
     host: 'localhost:3000' },
  rawHeaders:
   [ 'cookie',
     'Admin-Token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoiYWRtaW4iLCJleHAiOjE1MTMzMDY5NjR9.cAQNI6NHh8OUZgpQPCrXUE1t78fE5WHrExHGu2ZJ7XY',
     'accept-language',
     'zh-CN,zh;q=0.8',
     'accept-encoding',
     'gzip, deflate, br',
     'referer',
     'http://localhost:9528/',
     'accept',
     '*/*',
     'content-type',
     'multipart/form-data; boundary=----WebKitFormBoundaryt0jlVQnsNQJJpkPL',
     'user-agent',
     'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36',
     'origin',
     'http://localhost:9528',
     'content-length',
     '13665',
     'connection',
     'close',
     'host',
     'localhost:3000' ],
  trailers: {},
  rawTrailers: [],
  upgrade: false,
  url: '/upfilesubbomnum',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        bytesRead: 608,
        _externalStream: [External],
        fd: -1,
        reading: true,
        owner: [Circular],
        onread: [Function: onread],
        onconnection: null,
        writeQueueSize: 0,
        _consumed: true },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events:
      { end: [Array],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Array],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 10,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _bytesDispatched: 0,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 1120 },
     _server:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3000',
        [Symbol(asyncId)]: 1120 },
     _idleTimeout: 120000,
     _idleNext:
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idlePrev:
      TimersList {
        _idleNext: [Circular],
        _idlePrev: [Circular],
        _timer: [Object],
        _unrefed: true,
        msecs: 120000,
        nextTick: false },
     _idleStart: 307635,
     _destroyed: false,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        _consumed: true,
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        onIncoming: [Function: bound parserOnIncoming] },
     on: [Function: socketOnWrap],
     _paused: false,
     read: [Function],
     _consuming: true,
     _httpMessage:
      ServerResponse {
        domain: null,
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        upgrading: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: {},
        _startAt: undefined,
        _startTime: undefined,
        writeHead: [Function: writeHead],
        __onFinished: [Object],
        [Symbol(outHeadersKey)]: [Object] },
     _peername: { address: '::ffff:127.0.0.1', family: 'IPv6', port: 51181 },
     [Symbol(asyncId)]: 2006,
     [Symbol(bytesRead)]: 0,
     [Symbol(asyncId)]: 2008,
     [Symbol(triggerId)]: 1120 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '/api',
  originalUrl: '/api/upfilesubbomnum',
  _parsedUrl:
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/upfilesubbomnum',
     path: '/upfilesubbomnum',
     href: '/upfilesubbomnum',
     _raw: '/upfilesubbomnum' },
  params: {},
  query: {},
  res:
   ServerResponse {
     domain: null,
     _events: { finish: [Array], end: [Function: onevent] },
     _eventsCount: 2,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     upgrading: false,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 307635,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        _peername: [Object],
        [Symbol(asyncId)]: 2006,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 2008,
        [Symbol(triggerId)]: 1120 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: [Object],
        _eventsCount: 10,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: true,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: [Object],
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 307635,
        _destroyed: false,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular],
        _peername: [Object],
        [Symbol(asyncId)]: 2006,
        [Symbol(bytesRead)]: 0,
        [Symbol(asyncId)]: 2008,
        [Symbol(triggerId)]: 1120 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: {},
     _startAt: undefined,
     _startTime: undefined,
     writeHead: [Function: writeHead],
     __onFinished: { [Function: listener] queue: [Array] },
     [Symbol(outHeadersKey)]: { 'x-powered-by': [Array] } },
  _startAt: [ 2416547, 45961876 ],
  _startTime: 2017-12-14T09:36:36.085Z,
  _remoteAddress: '::ffff:127.0.0.1',
  body: {},
  secret: undefined,
  cookies: { 'Admin-Token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoiYWRtaW4iLCJleHAiOjE1MTMzMDY5NjR9.cAQNI6NHh8OUZgpQPCrXUE1t78fE5WHrExHGu2ZJ7XY' },
  signedCookies: {},
  models:
   { t_user:
      child {
        connections: [Object],
        waterline: [Object],
        adapter: [Object],
        _attributes: [Object],
        defaults: [Object],
        _cast: [Object],
        _schema: [Object],
        _validator: [Object],
        _callbacks: [Object],
        _instanceMethods: {},
        hasSchema: true,
        migrate: 'alter',
        _model: [Object],
        primaryKey: 'ID',
        _transformer: [Object],
        adapterDictionary: [Object],
        emit: [Function],
        pkFormat: 'integer',
        syncable: true,
        escape: [Function],
        escapeId: [Function],
        registerConnection: [Function],
        teardown: [Function],
        query: [Function],
        define: [Function],
        addAttribute: [Function],
        removeAttribute: [Function],
        findOneByID: [Function: dynamicMethod],
        findOneByIDIn: [Function: dynamicMethod],
        findOneByIDLike: [Function: dynamicMethod],
        findByID: [Function: dynamicMethod],
        findByIDIn: [Function: dynamicMethod],
        findByIDLike: [Function: dynamicMethod],
        countByID: [Function: dynamicMethod],
        countByIDIn: [Function: dynamicMethod],
        countByIDLike: [Function: dynamicMethod],
        IDStartsWith: [Function: dynamicMethod],
        IDContains: [Function: dynamicMethod],
        IDEndsWith: [Function: dynamicMethod],
        findOneByUsername: [Function: dynamicMethod],
        findOneByUsernameIn: [Function: dynamicMethod],
        findOneByUsernameLike: [Function: dynamicMethod],
        findByUsername: [Function: dynamicMethod],
        findByUsernameIn: [Function: dynamicMethod],
        findByUsernameLike: [Function: dynamicMethod],
        countByUsername: [Function: dynamicMethod],
        countByUsernameIn: [Function: dynamicMethod],
        countByUsernameLike: [Function: dynamicMethod],
        usernameStartsWith: [Function: dynamicMethod],
        usernameContains: [Function: dynamicMethod],
        usernameEndsWith: [Function: dynamicMethod],
        findOneByPassword: [Function: dynamicMethod],
        findOneByPasswordIn: [Function: dynamicMethod],
        findOneByPasswordLike: [Function: dynamicMethod],
        findByPassword: [Function: dynamicMethod],
        findByPasswordIn: [Function: dynamicMethod],
        findByPasswordLike: [Function: dynamicMethod],
        countByPassword: [Function: dynamicMethod],
        countByPasswordIn: [Function: dynamicMethod],
        countByPasswordLike: [Function: dynamicMethod],
        passwordStartsWith: [Function: dynamicMethod],
        passwordContains: [Function: dynamicMethod],
        passwordEndsWith: [Function: dynamicMethod],
        findOneByAdmin: [Function: dynamicMethod],
        findOneByAdminIn: [Function: dynamicMethod],
        findOneByAdminLike: [Function: dynamicMethod],
        findByAdmin: [Function: dynamicMethod],
        findByAdminIn: [Function: dynamicMethod],
        findByAdminLike: [Function: dynamicMethod],
        countByAdmin: [Function: dynamicMethod],
        countByAdminIn: [Function: dynamicMethod],
        countByAdminLike: [Function: dynamicMethod],
        adminStartsWith: [Function: dynamicMethod],
        adminContains: [Function: dynamicMethod],
        adminEndsWith: [Function: dynamicMethod],
        findOneByAvatar: [Function: dynamicMethod],
        findOneByAvatarIn: [Function: dynamicMethod],
        findOneByAvatarLike: [Function: dynamicMethod],
        findByAvatar: [Function: dynamicMethod],
        findByAvatarIn: [Function: dynamicMethod],
        findByAvatarLike: [Function: dynamicMethod],
        countByAvatar: [Function: dynamicMethod],
        countByAvatarIn: [Function: dynamicMethod],
        countByAvatarLike: [Function: dynamicMethod],
        avatarStartsWith: [Function: dynamicMethod],
        avatarContains: [Function: dynamicMethod],
        avatarEndsWith: [Function: dynamicMethod],
        findOneByCreatedAt: [Function: dynamicMethod],
        findOneByCreatedAtIn: [Function: dynamicMethod],
        findOneByCreatedAtLike: [Function: dynamicMethod],
        findByCreatedAt: [Function: dynamicMethod],
        findByCreatedAtIn: [Function: dynamicMethod],
        findByCreatedAtLike: [Function: dynamicMethod],
        countByCreatedAt: [Function: dynamicMethod],
        countByCreatedAtIn: [Function: dynamicMethod],
        countByCreatedAtLike: [Function: dynamicMethod],
        createdAtStartsWith: [Function: dynamicMethod],
        createdAtContains: [Function: dynamicMethod],
        createdAtEndsWith: [Function: dynamicMethod],
        findOneByUpdatedAt: [Function: dynamicMethod],
        findOneByUpdatedAtIn: [Function: dynamicMethod],
        findOneByUpdatedAtLike: [Function: dynamicMethod],
        findByUpdatedAt: [Function: dynamicMethod],
        findByUpdatedAtIn: [Function: dynamicMethod],
        findByUpdatedAtLike: [Function: dynamicMethod],
        countByUpdatedAt: [Function: dynamicMethod],
        countByUpdatedAtIn: [Function: dynamicMethod],
        countByUpdatedAtLike: [Function: dynamicMethod],
        updatedAtStartsWith: [Function: dynamicMethod],
        updatedAtContains: [Function: dynamicMethod],
        updatedAtEndsWith: [Function: dynamicMethod],
        definition: [Object],
        meta: [Object],
        schema: [Object] },
     t_bom:
      child {
        connections: [Object],
        waterline: [Object],
        adapter: [Object],
        _attributes: [Object],
        defaults: [Object],
        _cast: [Object],
        _schema: [Object],
        _validator: [Object],
        _callbacks: [Object],
        _instanceMethods: {},
        hasSchema: true,
        migrate: 'alter',
        _model: [Object],
        primaryKey: 'ID',
        _transformer: [Object],
        adapterDictionary: [Object],
        emit: [Function],
        pkFormat: 'integer',
        syncable: true,
        escape: [Function],
        escapeId: [Function],
        registerConnection: [Function],
        teardown: [Function],
        query: [Function],
        define: [Function],
        addAttribute: [Function],
        removeAttribute: [Function],
        findOneByID: [Function: dynamicMethod],
        findOneByIDIn: [Function: dynamicMethod],
        findOneByIDLike: [Function: dynamicMethod],
        findByID: [Function: dynamicMethod],
        findByIDIn: [Function: dynamicMethod],
        findByIDLike: [Function: dynamicMethod],
        countByID: [Function: dynamicMethod],
        countByIDIn: [Function: dynamicMethod],
        countByIDLike: [Function: dynamicMethod],
        IDStartsWith: [Function: dynamicMethod],
        IDContains: [Function: dynamicMethod],
        IDEndsWith: [Function: dynamicMethod],
        findOneByMfr_Value: [Function: dynamicMethod],
        findOneByMfr_ValueIn: [Function: dynamicMethod],
        findOneByMfr_ValueLike: [Function: dynamicMethod],
        findByMfr_Value: [Function: dynamicMethod],
        findByMfr_ValueIn: [Function: dynamicMethod],
        findByMfr_ValueLike: [Function: dynamicMethod],
        countByMfr_Value: [Function: dynamicMethod],
        countByMfr_ValueIn: [Function: dynamicMethod],
        countByMfr_ValueLike: [Function: dynamicMethod],
        Mfr_ValueStartsWith: [Function: dynamicMethod],
        Mfr_ValueContains: [Function: dynamicMethod],
        Mfr_ValueEndsWith: [Function: dynamicMethod],
        findOneByMfr: [Function: dynamicMethod],
        findOneByMfrIn: [Function: dynamicMethod],
        findOneByMfrLike: [Function: dynamicMethod],
        findByMfr: [Function: dynamicMethod],
        findByMfrIn: [Function: dynamicMethod],
        findByMfrLike: [Function: dynamicMethod],
        countByMfr: [Function: dynamicMethod],
        countByMfrIn: [Function: dynamicMethod],
        countByMfrLike: [Function: dynamicMethod],
        MfrStartsWith: [Function: dynamicMethod],
        MfrContains: [Function: dynamicMethod],
        MfrEndsWith: [Function: dynamicMethod],
        findOneByNum: [Function: dynamicMethod],
        findOneByNumIn: [Function: dynamicMethod],
        findOneByNumLike: [Function: dynamicMethod],
        findByNum: [Function: dynamicMethod],
        findByNumIn: [Function: dynamicMethod],
        findByNumLike: [Function: dynamicMethod],
        countByNum: [Function: dynamicMethod],
        countByNumIn: [Function: dynamicMethod],
        countByNumLike: [Function: dynamicMethod],
        NumStartsWith: [Function: dynamicMethod],
        NumContains: [Function: dynamicMethod],
        NumEndsWith: [Function: dynamicMethod],
        findOneByWaring_Value: [Function: dynamicMethod],
        findOneByWaring_ValueIn: [Function: dynamicMethod],
        findOneByWaring_ValueLike: [Function: dynamicMethod],
        findByWaring_Value: [Function: dynamicMethod],
        findByWaring_ValueIn: [Function: dynamicMethod],
        findByWaring_ValueLike: [Function: dynamicMethod],
        countByWaring_Value: [Function: dynamicMethod],
        countByWaring_ValueIn: [Function: dynamicMethod],
        countByWaring_ValueLike: [Function: dynamicMethod],
        Waring_ValueStartsWith: [Function: dynamicMethod],
        Waring_ValueContains: [Function: dynamicMethod],
        Waring_ValueEndsWith: [Function: dynamicMethod],
        findOneByEncodeNum: [Function: dynamicMethod],
        findOneByEncodeNumIn: [Function: dynamicMethod],
        findOneByEncodeNumLike: [Function: dynamicMethod],
        findByEncodeNum: [Function: dynamicMethod],
        findByEncodeNumIn: [Function: dynamicMethod],
        findByEncodeNumLike: [Function: dynamicMethod],
        countByEncodeNum: [Function: dynamicMethod],
        countByEncodeNumIn: [Function: dynamicMethod],
        countByEncodeNumLike: [Function: dynamicMethod],
        EncodeNumStartsWith: [Function: dynamicMethod],
        EncodeNumContains: [Function: dynamicMethod],
        EncodeNumEndsWith: [Function: dynamicMethod],
        findOneByPrice: [Function: dynamicMethod],
        findOneByPriceIn: [Function: dynamicMethod],
        findOneByPriceLike: [Function: dynamicMethod],
        findByPrice: [Function: dynamicMethod],
        findByPriceIn: [Function: dynamicMethod],
        findByPriceLike: [Function: dynamicMethod],
        countByPrice: [Function: dynamicMethod],
        countByPriceIn: [Function: dynamicMethod],
        countByPriceLike: [Function: dynamicMethod],
        PriceStartsWith: [Function: dynamicMethod],
        PriceContains: [Function: dynamicMethod],
        PriceEndsWith: [Function: dynamicMethod],
        findOneByRemark: [Function: dynamicMethod],
        findOneByRemarkIn: [Function: dynamicMethod],
        findOneByRemarkLike: [Function: dynamicMethod],
        findByRemark: [Function: dynamicMethod],
        findByRemarkIn: [Function: dynamicMethod],
        findByRemarkLike: [Function: dynamicMethod],
        countByRemark: [Function: dynamicMethod],
        countByRemarkIn: [Function: dynamicMethod],
        countByRemarkLike: [Function: dynamicMethod],
        RemarkStartsWith: [Function: dynamicMethod],
        RemarkContains: [Function: dynamicMethod],
        RemarkEndsWith: [Function: dynamicMethod],
        findOneByCreatedAt: [Function: dynamicMethod],
        findOneByCreatedAtIn: [Function: dynamicMethod],
        findOneByCreatedAtLike: [Function: dynamicMethod],
        findByCreatedAt: [Function: dynamicMethod],
        findByCreatedAtIn: [Function: dynamicMethod],
        findByCreatedAtLike: [Function: dynamicMethod],
        countByCreatedAt: [Function: dynamicMethod],
        countByCreatedAtIn: [Function: dynamicMethod],
        countByCreatedAtLike: [Function: dynamicMethod],
        createdAtStartsWith: [Function: dynamicMethod],
        createdAtContains: [Function: dynamicMethod],
        createdAtEndsWith: [Function: dynamicMethod],
        findOneByUpdatedAt: [Function: dynamicMethod],
        findOneByUpdatedAtIn: [Function: dynamicMethod],
        findOneByUpdatedAtLike: [Function: dynamicMethod],
        findByUpdatedAt: [Function: dynamicMethod],
        findByUpdatedAtIn: [Function: dynamicMethod],
        findByUpdatedAtLike: [Function: dynamicMethod],
        countByUpdatedAt: [Function: dynamicMethod],
        countByUpdatedAtIn: [Function: dynamicMethod],
        countByUpdatedAtLike: [Function: dynamicMethod],
        updatedAtStartsWith: [Function: dynamicMethod],
        updatedAtContains: [Function: dynamicMethod],
        updatedAtEndsWith: [Function: dynamicMethod],
        definition: [Object],
        meta: [Object],
        schema: [Object] },
     t_addbom:
      child {
        connections: [Object],
        waterline: [Object],
        adapter: [Object],
        _attributes: [Object],
        defaults: [Object],
        _cast: [Object],
        _schema: [Object],
        _validator: [Object],
        _callbacks: [Object],
        _instanceMethods: {},
        hasSchema: true,
        migrate: 'alter',
        _model: [Object],
        primaryKey: 'ID',
        _transformer: [Object],
        adapterDictionary: [Object],
        emit: [Function],
        pkFormat: 'integer',
        syncable: true,
        escape: [Function],
        escapeId: [Function],
        registerConnection: [Function],
        teardown: [Function],
        query: [Function],
        define: [Function],
        addAttribute: [Function],
        removeAttribute: [Function],
        findOneByID: [Function: dynamicMethod],
        findOneByIDIn: [Function: dynamicMethod],
        findOneByIDLike: [Function: dynamicMethod],
        findByID: [Function: dynamicMethod],
        findByIDIn: [Function: dynamicMethod],
        findByIDLike: [Function: dynamicMethod],
        countByID: [Function: dynamicMethod],
        countByIDIn: [Function: dynamicMethod],
        countByIDLike: [Function: dynamicMethod],
        IDStartsWith: [Function: dynamicMethod],
        IDContains: [Function: dynamicMethod],
        IDEndsWith: [Function: dynamicMethod],
        findOneByMfr_Value: [Function: dynamicMethod],
        findOneByMfr_ValueIn: [Function: dynamicMethod],
        findOneByMfr_ValueLike: [Function: dynamicMethod],
        findByMfr_Value: [Function: dynamicMethod],
        findByMfr_ValueIn: [Function: dynamicMethod],
        findByMfr_ValueLike: [Function: dynamicMethod],
        countByMfr_Value: [Function: dynamicMethod],
        countByMfr_ValueIn: [Function: dynamicMethod],
        countByMfr_ValueLike: [Function: dynamicMethod],
        Mfr_ValueStartsWith: [Function: dynamicMethod],
        Mfr_ValueContains: [Function: dynamicMethod],
        Mfr_ValueEndsWith: [Function: dynamicMethod],
        findOneByMfr: [Function: dynamicMethod],
        findOneByMfrIn: [Function: dynamicMethod],
        findOneByMfrLike: [Function: dynamicMethod],
        findByMfr: [Function: dynamicMethod],
        findByMfrIn: [Function: dynamicMethod],
        findByMfrLike: [Function: dynamicMethod],
        countByMfr: [Function: dynamicMethod],
        countByMfrIn: [Function: dynamicMethod],
        countByMfrLike: [Function: dynamicMethod],
        MfrStartsWith: [Function: dynamicMethod],
        MfrContains: [Function: dynamicMethod],
        MfrEndsWith: [Function: dynamicMethod],
        findOneByNum: [Function: dynamicMethod],
        findOneByNumIn: [Function: dynamicMethod],
        findOneByNumLike: [Function: dynamicMethod],
        findByNum: [Function: dynamicMethod],
        findByNumIn: [Function: dynamicMethod],
        findByNumLike: [Function: dynamicMethod],
        countByNum: [Function: dynamicMethod],
        countByNumIn: [Function: dynamicMethod],
        countByNumLike: [Function: dynamicMethod],
        NumStartsWith: [Function: dynamicMethod],
        NumContains: [Function: dynamicMethod],
        NumEndsWith: [Function: dynamicMethod],
        findOneByWaring_Value: [Function: dynamicMethod],
        findOneByWaring_ValueIn: [Function: dynamicMethod],
        findOneByWaring_ValueLike: [Function: dynamicMethod],
        findByWaring_Value: [Function: dynamicMethod],
        findByWaring_ValueIn: [Function: dynamicMethod],
        findByWaring_ValueLike: [Function: dynamicMethod],
        countByWaring_Value: [Function: dynamicMethod],
        countByWaring_ValueIn: [Function: dynamicMethod],
        countByWaring_ValueLike: [Function: dynamicMethod],
        Waring_ValueStartsWith: [Function: dynamicMethod],
        Waring_ValueContains: [Function: dynamicMethod],
        Waring_ValueEndsWith: [Function: dynamicMethod],
        findOneByEncodeNum: [Function: dynamicMethod],
        findOneByEncodeNumIn: [Function: dynamicMethod],
        findOneByEncodeNumLike: [Function: dynamicMethod],
        findByEncodeNum: [Function: dynamicMethod],
        findByEncodeNumIn: [Function: dynamicMethod],
        findByEncodeNumLike: [Function: dynamicMethod],
        countByEncodeNum: [Function: dynamicMethod],
        countByEncodeNumIn: [Function: dynamicMethod],
        countByEncodeNumLike: [Function: dynamicMethod],
        EncodeNumStartsWith: [Function: dynamicMethod],
        EncodeNumContains: [Function: dynamicMethod],
        EncodeNumEndsWith: [Function: dynamicMethod],
        findOneByPrice: [Function: dynamicMethod],
        findOneByPriceIn: [Function: dynamicMethod],
        findOneByPriceLike: [Function: dynamicMethod],
        findByPrice: [Function: dynamicMethod],
        findByPriceIn: [Function: dynamicMethod],
        findByPriceLike: [Function: dynamicMethod],
        countByPrice: [Function: dynamicMethod],
        countByPriceIn: [Function: dynamicMethod],
        countByPriceLike: [Function: dynamicMethod],
        PriceStartsWith: [Function: dynamicMethod],
        PriceContains: [Function: dynamicMethod],
        PriceEndsWith: [Function: dynamicMethod],
        findOneByRemark: [Function: dynamicMethod],
        findOneByRemarkIn: [Function: dynamicMethod],
        findOneByRemarkLike: [Function: dynamicMethod],
        findByRemark: [Function: dynamicMethod],
        findByRemarkIn: [Function: dynamicMethod],
        findByRemarkLike: [Function: dynamicMethod],
        countByRemark: [Function: dynamicMethod],
        countByRemarkIn: [Function: dynamicMethod],
        countByRemarkLike: [Function: dynamicMethod],
        RemarkStartsWith: [Function: dynamicMethod],
        RemarkContains: [Function: dynamicMethod],
        RemarkEndsWith: [Function: dynamicMethod],
        findOneByCreatedAt: [Function: dynamicMethod],
        findOneByCreatedAtIn: [Function: dynamicMethod],
        findOneByCreatedAtLike: [Function: dynamicMethod],
        findByCreatedAt: [Function: dynamicMethod],
        findByCreatedAtIn: [Function: dynamicMethod],
        findByCreatedAtLike: [Function: dynamicMethod],
        countByCreatedAt: [Function: dynamicMethod],
        countByCreatedAtIn: [Function: dynamicMethod],
        countByCreatedAtLike: [Function: dynamicMethod],
        createdAtStartsWith: [Function: dynamicMethod],
        createdAtContains: [Function: dynamicMethod],
        createdAtEndsWith: [Function: dynamicMethod],
        findOneByUpdatedAt: [Function: dynamicMethod],
        findOneByUpdatedAtIn: [Function: dynamicMethod],
        findOneByUpdatedAtLike: [Function: dynamicMethod],
        findByUpdatedAt: [Function: dynamicMethod],
        findByUpdatedAtIn: [Function: dynamicMethod],
        findByUpdatedAtLike: [Function: dynamicMethod],
        countByUpdatedAt: [Function: dynamicMethod],
        countByUpdatedAtIn: [Function: dynamicMethod],
        countByUpdatedAtLike: [Function: dynamicMethod],
        updatedAtStartsWith: [Function: dynamicMethod],
        updatedAtContains: [Function: dynamicMethod],
        updatedAtEndsWith: [Function: dynamicMethod],
        definition: [Object],
        meta: [Object],
        schema: [Object] },
     t_subbom:
      child {
        connections: [Object],
        waterline: [Object],
        adapter: [Object],
        _attributes: [Object],
        defaults: [Object],
        _cast: [Object],
        _schema: [Object],
        _validator: [Object],
        _callbacks: [Object],
        _instanceMethods: {},
        hasSchema: true,
        migrate: 'alter',
        _model: [Object],
        primaryKey: 'ID',
        _transformer: [Object],
        adapterDictionary: [Object],
        emit: [Function],
        pkFormat: 'integer',
        syncable: true,
        escape: [Function],
        escapeId: [Function],
        registerConnection: [Function],
        teardown: [Function],
        query: [Function],
        define: [Function],
        addAttribute: [Function],
        removeAttribute: [Function],
        findOneByID: [Function: dynamicMethod],
        findOneByIDIn: [Function: dynamicMethod],
        findOneByIDLike: [Function: dynamicMethod],
        findByID: [Function: dynamicMethod],
        findByIDIn: [Function: dynamicMethod],
        findByIDLike: [Function: dynamicMethod],
        countByID: [Function: dynamicMethod],
        countByIDIn: [Function: dynamicMethod],
        countByIDLike: [Function: dynamicMethod],
        IDStartsWith: [Function: dynamicMethod],
        IDContains: [Function: dynamicMethod],
        IDEndsWith: [Function: dynamicMethod],
        findOneByMfr_Value: [Function: dynamicMethod],
        findOneByMfr_ValueIn: [Function: dynamicMethod],
        findOneByMfr_ValueLike: [Function: dynamicMethod],
        findByMfr_Value: [Function: dynamicMethod],
        findByMfr_ValueIn: [Function: dynamicMethod],
        findByMfr_ValueLike: [Function: dynamicMethod],
        countByMfr_Value: [Function: dynamicMethod],
        countByMfr_ValueIn: [Function: dynamicMethod],
        countByMfr_ValueLike: [Function: dynamicMethod],
        Mfr_ValueStartsWith: [Function: dynamicMethod],
        Mfr_ValueContains: [Function: dynamicMethod],
        Mfr_ValueEndsWith: [Function: dynamicMethod],
        findOneByMfr: [Function: dynamicMethod],
        findOneByMfrIn: [Function: dynamicMethod],
        findOneByMfrLike: [Function: dynamicMethod],
        findByMfr: [Function: dynamicMethod],
        findByMfrIn: [Function: dynamicMethod],
        findByMfrLike: [Function: dynamicMethod],
        countByMfr: [Function: dynamicMethod],
        countByMfrIn: [Function: dynamicMethod],
        countByMfrLike: [Function: dynamicMethod],
        MfrStartsWith: [Function: dynamicMethod],
        MfrContains: [Function: dynamicMethod],
        MfrEndsWith: [Function: dynamicMethod],
        findOneByNum: [Function: dynamicMethod],
        findOneByNumIn: [Function: dynamicMethod],
        findOneByNumLike: [Function: dynamicMethod],
        findByNum: [Function: dynamicMethod],
        findByNumIn: [Function: dynamicMethod],
        findByNumLike: [Function: dynamicMethod],
        countByNum: [Function: dynamicMethod],
        countByNumIn: [Function: dynamicMethod],
        countByNumLike: [Function: dynamicMethod],
        NumStartsWith: [Function: dynamicMethod],
        NumContains: [Function: dynamicMethod],
        NumEndsWith: [Function: dynamicMethod],
        findOneByWaring_Value: [Function: dynamicMethod],
        findOneByWaring_ValueIn: [Function: dynamicMethod],
        findOneByWaring_ValueLike: [Function: dynamicMethod],
        findByWaring_Value: [Function: dynamicMethod],
        findByWaring_ValueIn: [Function: dynamicMethod],
        findByWaring_ValueLike: [Function: dynamicMethod],
        countByWaring_Value: [Function: dynamicMethod],
        countByWaring_ValueIn: [Function: dynamicMethod],
        countByWaring_ValueLike: [Function: dynamicMethod],
        Waring_ValueStartsWith: [Function: dynamicMethod],
        Waring_ValueContains: [Function: dynamicMethod],
        Waring_ValueEndsWith: [Function: dynamicMethod],
        findOneByEncodeNum: [Function: dynamicMethod],
        findOneByEncodeNumIn: [Function: dynamicMethod],
        findOneByEncodeNumLike: [Function: dynamicMethod],
        findByEncodeNum: [Function: dynamicMethod],
        findByEncodeNumIn: [Function: dynamicMethod],
        findByEncodeNumLike: [Function: dynamicMethod],
        countByEncodeNum: [Function: dynamicMethod],
        countByEncodeNumIn: [Function: dynamicMethod],
        countByEncodeNumLike: [Function: dynamicMethod],
        EncodeNumStartsWith: [Function: dynamicMethod],
        EncodeNumContains: [Function: dynamicMethod],
        EncodeNumEndsWith: [Function: dynamicMethod],
        findOneByPrice: [Function: dynamicMethod],
        findOneByPriceIn: [Function: dynamicMethod],
        findOneByPriceLike: [Function: dynamicMethod],
        findByPrice: [Function: dynamicMethod],
        findByPriceIn: [Function: dynamicMethod],
        findByPriceLike: [Function: dynamicMethod],
        countByPrice: [Function: dynamicMethod],
        countByPriceIn: [Function: dynamicMethod],
        countByPriceLike: [Function: dynamicMethod],
        PriceStartsWith: [Function: dynamicMethod],
        PriceContains: [Function: dynamicMethod],
        PriceEndsWith: [Function: dynamicMethod],
        findOneByRemark: [Function: dynamicMethod],
        findOneByRemarkIn: [Function: dynamicMethod],
        findOneByRemarkLike: [Function: dynamicMethod],
        findByRemark: [Function: dynamicMethod],
        findByRemarkIn: [Function: dynamicMethod],
        findByRemarkLike: [Function: dynamicMethod],
        countByRemark: [Function: dynamicMethod],
        countByRemarkIn: [Function: dynamicMethod],
        countByRemarkLike: [Function: dynamicMethod],
        RemarkStartsWith: [Function: dynamicMethod],
        RemarkContains: [Function: dynamicMethod],
        RemarkEndsWith: [Function: dynamicMethod],
        findOneByCreatedAt: [Function: dynamicMethod],
        findOneByCreatedAtIn: [Function: dynamicMethod],
        findOneByCreatedAtLike: [Function: dynamicMethod],
        findByCreatedAt: [Function: dynamicMethod],
        findByCreatedAtIn: [Function: dynamicMethod],
        findByCreatedAtLike: [Function: dynamicMethod],
        countByCreatedAt: [Function: dynamicMethod],
        countByCreatedAtIn: [Function: dynamicMethod],
        countByCreatedAtLike: [Function: dynamicMethod],
        createdAtStartsWith: [Function: dynamicMethod],
        createdAtContains: [Function: dynamicMethod],
        createdAtEndsWith: [Function: dynamicMethod],
        findOneByUpdatedAt: [Function: dynamicMethod],
        findOneByUpdatedAtIn: [Function: dynamicMethod],
        findOneByUpdatedAtLike: [Function: dynamicMethod],
        findByUpdatedAt: [Function: dynamicMethod],
        findByUpdatedAtIn: [Function: dynamicMethod],
        findByUpdatedAtLike: [Function: dynamicMethod],
        countByUpdatedAt: [Function: dynamicMethod],
        countByUpdatedAtIn: [Function: dynamicMethod],
        countByUpdatedAtLike: [Function: dynamicMethod],
        updatedAtStartsWith: [Function: dynamicMethod],
        updatedAtContains: [Function: dynamicMethod],
        updatedAtEndsWith: [Function: dynamicMethod],
        definition: [Object],
        meta: [Object],
        schema: [Object] } },
  route:
   Route {
     path: '/upfilesubbomnum',
     stack: [ [Object] ],
     methods: { post: true } } } {}
POST /api/upfilesubbomnum 200 311.260 ms - 53
